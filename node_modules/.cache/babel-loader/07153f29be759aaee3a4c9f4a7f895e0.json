{"ast":null,"code":"import initialState from \"./initialState\";\n\nconst player1 = state => ({ ...state,\n  player1: state.player1 + 1\n});\n\nconst player2 = state => ({ ...state,\n  player2: state.player2 + 1\n});\n\nconst serving = state => ({ ...state,\n  p1Serving: (state.player1 + state.player2) % 5 === 0 ? !state.p1Serving : state.p1Serving\n});\n\nconst winner = state => ({ ...state,\n  winner: state.player1 >= 21 ? 1 : state.player2 >= 21 ? 2 : 0\n});\n\nconst saveSettingsReducer = (state, {\n  player1Name,\n  player2Name\n}) => {\n  return { ...state,\n    player1Name: player1Name,\n    player2Name: player2Name\n  };\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"PLAYER1\":\n      return winner(serving(player1(state)));\n\n    case \"PLAYER2\":\n      return winner(serving(player2(state)));\n\n    case \"RESET\":\n      return initialState;\n\n    case \"SAVE_SETTINGS\":\n      return saveSettingsReducer(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/mnt/c/Users/origi/Desktop/codingFellowship/week_11/ping-pong/src/data/reducer.js"],"names":["initialState","player1","state","player2","serving","p1Serving","winner","saveSettingsReducer","player1Name","player2Name","reducer","action","type"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,gBAAzB;;AAEA,MAAMC,OAAO,GAAGC,KAAK,KAAK,EAAE,GAAGA,KAAL;AAAYD,EAAAA,OAAO,EAAEC,KAAK,CAACD,OAAN,GAAgB;AAArC,CAAL,CAArB;;AACA,MAAME,OAAO,GAAGD,KAAK,KAAK,EAAE,GAAGA,KAAL;AAAYC,EAAAA,OAAO,EAAED,KAAK,CAACC,OAAN,GAAgB;AAArC,CAAL,CAArB;;AACA,MAAMC,OAAO,GAAGF,KAAK,KAAK,EAAE,GAAGA,KAAL;AAAYG,EAAAA,SAAS,EAAE,CAACH,KAAK,CAACD,OAAN,GAAgBC,KAAK,CAACC,OAAvB,IAAkC,CAAlC,KAAwC,CAAxC,GAA4C,CAACD,KAAK,CAACG,SAAnD,GAA+DH,KAAK,CAACG;AAA5F,CAAL,CAArB;;AACA,MAAMC,MAAM,GAAGJ,KAAK,KAAK,EAAE,GAAGA,KAAL;AAAYI,EAAAA,MAAM,EAAEJ,KAAK,CAACD,OAAN,IAAiB,EAAjB,GAAsB,CAAtB,GAA2BC,KAAK,CAACC,OAAN,IAAiB,EAAjB,GAAsB,CAAtB,GAA0B;AAAzE,CAAL,CAApB;;AACA,MAAMI,mBAAmB,GAAG,CAACL,KAAD,EAAQ;AAAEM,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAAR,KAAyC;AACjE,SAAO,EAAE,GAAGP,KAAL;AAAYM,IAAAA,WAAW,EAAEA,WAAzB;AAAsCC,IAAAA,WAAW,EAAEA;AAAnD,GAAP;AACH,CAFD;;AAIA,MAAMC,OAAO,GAAG,CAACR,KAAD,EAAQS,MAAR,KAAmB;AAC/B,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,SAAL;AAAgB,aAAON,MAAM,CAACF,OAAO,CAACH,OAAO,CAACC,KAAD,CAAR,CAAR,CAAb;;AAChB,SAAK,SAAL;AAAgB,aAAOI,MAAM,CAACF,OAAO,CAACD,OAAO,CAACD,KAAD,CAAR,CAAR,CAAb;;AAChB,SAAK,OAAL;AAAc,aAAOF,YAAP;;AACd,SAAK,eAAL;AAAsB,aAAOO,mBAAmB,CAACL,KAAD,EAAQS,MAAR,CAA1B;;AACtB;AAAS,aAAOT,KAAP;AALb;AAOH,CARD;;AAUA,eAAeQ,OAAf","sourcesContent":["import initialState from \"./initialState\";\r\n\r\nconst player1 = state => ({ ...state, player1: state.player1 + 1 });\r\nconst player2 = state => ({ ...state, player2: state.player2 + 1 });\r\nconst serving = state => ({ ...state, p1Serving: (state.player1 + state.player2) % 5 === 0 ? !state.p1Serving : state.p1Serving });\r\nconst winner = state => ({ ...state, winner: state.player1 >= 21 ? 1 : (state.player2 >= 21 ? 2 : 0) });\r\nconst saveSettingsReducer = (state, { player1Name, player2Name }) => {\r\n    return { ...state, player1Name: player1Name, player2Name: player2Name }\r\n}\r\n\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case \"PLAYER1\": return winner(serving(player1(state)));\r\n        case \"PLAYER2\": return winner(serving(player2(state)));\r\n        case \"RESET\": return initialState;\r\n        case \"SAVE_SETTINGS\": return saveSettingsReducer(state, action);\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}